# 실행 컨텍스트

식별자, 스코프,호이스팅, 클로저 등의 동작 원리를 담고 있는 **자바스크립트의 핵심 개념**이다.

<br>

### 1. 실행 가능한 코드

ECMAScript 사양은 실행 가능한 코드를 4가지 유형으로 구분한다.

| 실행 가능한 코드         | 설명                                                         |
| ------------------------ | ------------------------------------------------------------ |
| 전역코드 (Global code)   | 전역에 존재하는 텍스트 코드를 말한다. 전역에 정의된 함수, 클래스 등의 내부 코드는 포함되지 않는다. |
| 함수코드 (Function code) | 함수 내부에 존재하는 텍스트 코드를 말한다. 함수 내부에 중첩된 함수, 클래스 등의 내부 코드는 포함되지 않는다. |
| Eval 코드 (Eval code)    | 빌트인 전역 함수인 eval 함수에 인수로 전달된 텍스트 코드를 말한다. |
| 모듈 코드 (Module code)  | 모듈 내부에 존재하는 텍스트 코드를 말한다. 모듈 내부의 함수, 클래스 등의 내부 코드는 포함되지 않는다. |

실행 가능한 코드를 4가지 유형으로 구분하는 이유는 각 유형마다 실행 컨텍스트를 생성하는 과정과 관리 내용이 다르기 때문이다.

1. 전역코드

   >전역 스코프를 생성해야 하며 전역 객체와 연결되어야 한다. 이를 위해 전역 코드가 평가되면 전역 실행 컨텍스트가 실행된다.

2. 함수코드

   > 지역 스코프를 생성해야 하며 새성된 지역 스코프는 스코프 체인의 최상위인 전역 스코프에서 시작하는 스코프 체인의 일원으로 연결되어야 한다. 이를 위해 함수 코드가 평가되면 함수 실행 컨텍스트가 실행된다.

3. eval 코드

   > eval 코드는 엄격모드에서 자신만의 독자적인 스코프를 생성한다. 이를 위해 eval 코드가 평가되면 eval 실행 컨텍스트가 실행된다.

4. 모듈 코드

   > 모듈 별로 독립적인 스코프를 생성한다. 이를 위해 모듈 코드가 평가되면 모듈 실행 컨텍스트가 실행된다.

<img src="https://poiemaweb.com/assets/fs-images/22-1.png" style="zoom:48%;" />



<br>

### 2. 실행 가능한 코드의 평가와 실행

모든 실행 가능한 코드는 실행에 앞서 평가 과정을 거치면서 코드 실행을 위한 준비를 한다. 코드의 평가 과정에서 실행 컨텍스트가 생성되고 변수, 함수, 클래스 등의 선언문이 평가되어 그 결과가 생성된 실행 컨텍스트에 등록된다.

코드의 평가 과정이 끝나면 비로소 선언문을 제외한 코드가 순차적으로 실행된다. 이때 코드 실행에 필요한 정보를 실행 컨텍스트에서 취득한다. 그리고 코드의 실행 결과는 실행 컨텍스트에서 관리된다.



<br>

### 3. 실행 컨텍스트의 역활

1. 전역 코드 평가

2. 전역 코드 실행
3. 함수 코드 평가
4. 함수 코드 실행

코드가 실행되려면 스코프를 구분하여 식별자와 바인딩된 값을 관리할 수 있어야 한다. 그리고 중첩 관계에 의해 스코프 체인을 형성하여 식별자를 검색할 수 있어야 하고, 전역 객체의 프로퍼티도 전역 변수처럼 검색할 수 있어야 한다.

1. 선언에 의해 생성된 모든 식별자(변수, 함수, 클래스 등)를 스코프를 구분하여 등록하고 상태 변화(식별자에 바인딩된 값의 변화)를 지속적으로 관리할 수 있어야 한다.
2. 스코프는 중첩 관계에 의해 스코프 체인을 형성해야 한다. 즉, 스코프 체인을 통해 상위 스코프로 이동하며 식별자를 검색할 수 있어야 한다.
3. 현재 실행 중인 코드의 실행 순서를 변경(예를 들어 함수 호출에 의한 실행 순서 변경)할 수 있어야 하며 다시 되돌아갈 수도 있어야 한다.

이 모든 것을 관리하는 것이 바로 실행 컨텍스트이다. **실행 컨텍스트(Execution Context)는 실행 가능한 코드를 평가하고 실행하기 위해 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.**

<br>

실행 컨텍스트는 식별자(변수, 함수, 클래스 등의 이름)를 등록하고 관리하는 스코프와 실행 순서 관리를 구현한 내부 매커니즘으로 모든 코드는 실행 컨텍스트를 통해 실행되고 관리된다.



<br>

### 4. 실행 컨텍스트 스택

자바스크립트 엔진은 먼저 전역 코드를 평가하여 전역 실행 컨텍스트를 생성한다. 그리고 함수가 호출되면 함수 코드를 평가하여 함수 실행 컨텍스트를 생성한다.

이때 생성된 실행 컨텍스트는 스택 자료 구조로 관리된다. 이를 **실행 컨텍스트 스택** 이라 부른다.

**실행 컨텍스트 스택은 코드의 실행 순서를 관리한다.** 실행 가능한 코드가 평가되면 실행 컨텍스트가 생성되고 실행 컨텍스트 스택의 최상위에 쌓인다.

**실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트는 언제나 현재 실행 중인 코드의 실행 컨텍스트이다.** 따라서 실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트를 **실행 중인 실행 컨텍스트** 라 부른다.

실행 가능한 코드의 실행이 종료되면 해당 실행 컨텍스트는 실행 컨텍스트 스택에서 팝되어 제거되고 직전의 샐행 컨텍스트로 코드의 제어권을 반환한다.



<br>

### 5.  동기식 처리 모델과 비동기식 처리 모델

자바스크립트 엔진은 단 하나의 실행 컨텍스트 스택을 갖는다. 즉, 자바스크립트 애플리케이션은 여러 개의 실행 컨텍스트 스택에서 실행할 수 없으며 이는 동시에 두가지 이상의 태스크를 실행할 수 없다는 것을 의미한다. 

실행컨텍스트 스택의 최상위 스택만이 현재 실행중인 실행 컨텍스트이며, 나머지 실행 컨텍스트는 모두 대기중인 실행 컨텍스트이기 때문이다. 이는 **자바스크립트는 싱글 스레드로 동작한다는 것을 의미한다.**

